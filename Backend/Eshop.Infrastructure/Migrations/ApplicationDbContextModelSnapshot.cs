// <auto-generated />
using System;
using Eshop.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eshop.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eshop.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Eshop.Core.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("Eshop.Core.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSizeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Men"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Women"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Girls"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Boys"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Kids"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Makeup"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("Eshop.Core.Entities.Favorite", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteService");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeatureValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("FeatureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DeliveryFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Eshop.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSizeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DeliveryFee")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAddedReviewBefore")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorites")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfRatings")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PurchaseNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("isPreviouslyBought")
                        .HasColumnType("bit");

                    b.Property<string>("sellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("sellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Eshop.Core.Entities.ProductImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Eshop.Core.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("Eshop.Core.Entities.PurchaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("purchaseItems");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("customerImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reviewImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("CustomerId", "ProductId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            Name = "S"
                        },
                        new
                        {
                            SizeId = 2,
                            Name = "M"
                        },
                        new
                        {
                            SizeId = 3,
                            Name = "L"
                        },
                        new
                        {
                            SizeId = 4,
                            Name = "XS"
                        },
                        new
                        {
                            SizeId = 5,
                            Name = "XL"
                        },
                        new
                        {
                            SizeId = 6,
                            Name = "XXL"
                        },
                        new
                        {
                            SizeId = 7,
                            Name = "XXXL"
                        },
                        new
                        {
                            SizeId = 8,
                            Name = "XXXXL"
                        },
                        new
                        {
                            SizeId = 9,
                            Name = "1"
                        },
                        new
                        {
                            SizeId = 10,
                            Name = "2"
                        },
                        new
                        {
                            SizeId = 11,
                            Name = "3"
                        },
                        new
                        {
                            SizeId = 12,
                            Name = "4"
                        },
                        new
                        {
                            SizeId = 13,
                            Name = "5"
                        },
                        new
                        {
                            SizeId = 14,
                            Name = "6"
                        },
                        new
                        {
                            SizeId = 15,
                            Name = "7"
                        },
                        new
                        {
                            SizeId = 16,
                            Name = "8"
                        },
                        new
                        {
                            SizeId = 17,
                            Name = "9"
                        },
                        new
                        {
                            SizeId = 18,
                            Name = "10"
                        },
                        new
                        {
                            SizeId = 19,
                            Name = "11"
                        },
                        new
                        {
                            SizeId = 20,
                            Name = "12"
                        },
                        new
                        {
                            SizeId = 21,
                            Name = "13"
                        },
                        new
                        {
                            SizeId = 22,
                            Name = "14"
                        },
                        new
                        {
                            SizeId = 23,
                            Name = "15"
                        },
                        new
                        {
                            SizeId = 24,
                            Name = "16"
                        },
                        new
                        {
                            SizeId = 25,
                            Name = "17"
                        },
                        new
                        {
                            SizeId = 26,
                            Name = "18"
                        },
                        new
                        {
                            SizeId = 27,
                            Name = "19"
                        },
                        new
                        {
                            SizeId = 28,
                            Name = "20"
                        },
                        new
                        {
                            SizeId = 29,
                            Name = "21"
                        },
                        new
                        {
                            SizeId = 30,
                            Name = "22"
                        },
                        new
                        {
                            SizeId = 31,
                            Name = "23"
                        },
                        new
                        {
                            SizeId = 32,
                            Name = "24"
                        },
                        new
                        {
                            SizeId = 33,
                            Name = "25"
                        },
                        new
                        {
                            SizeId = 34,
                            Name = "26"
                        },
                        new
                        {
                            SizeId = 35,
                            Name = "27"
                        },
                        new
                        {
                            SizeId = 36,
                            Name = "28"
                        },
                        new
                        {
                            SizeId = 37,
                            Name = "29"
                        },
                        new
                        {
                            SizeId = 38,
                            Name = "30"
                        },
                        new
                        {
                            SizeId = 39,
                            Name = "31"
                        },
                        new
                        {
                            SizeId = 40,
                            Name = "32"
                        },
                        new
                        {
                            SizeId = 41,
                            Name = "33"
                        },
                        new
                        {
                            SizeId = 42,
                            Name = "34"
                        },
                        new
                        {
                            SizeId = 43,
                            Name = "35"
                        },
                        new
                        {
                            SizeId = 44,
                            Name = "36"
                        },
                        new
                        {
                            SizeId = 45,
                            Name = "37"
                        },
                        new
                        {
                            SizeId = 46,
                            Name = "38"
                        },
                        new
                        {
                            SizeId = 47,
                            Name = "39"
                        },
                        new
                        {
                            SizeId = 48,
                            Name = "40"
                        },
                        new
                        {
                            SizeId = 49,
                            Name = "41"
                        },
                        new
                        {
                            SizeId = 50,
                            Name = "42"
                        },
                        new
                        {
                            SizeId = 51,
                            Name = "43"
                        },
                        new
                        {
                            SizeId = 52,
                            Name = "44"
                        },
                        new
                        {
                            SizeId = 53,
                            Name = "45"
                        },
                        new
                        {
                            SizeId = 54,
                            Name = "46"
                        },
                        new
                        {
                            SizeId = 55,
                            Name = "47"
                        },
                        new
                        {
                            SizeId = 56,
                            Name = "48"
                        },
                        new
                        {
                            SizeId = 57,
                            Name = "49"
                        },
                        new
                        {
                            SizeId = 58,
                            Name = "50"
                        });
                });

            modelBuilder.Entity("Eshop.Core.Entities.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            SubCategoryId = 1,
                            CategoryId = 1,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            SubCategoryId = 2,
                            CategoryId = 1,
                            Name = "Shirts"
                        },
                        new
                        {
                            SubCategoryId = 3,
                            CategoryId = 1,
                            Name = "Pants"
                        },
                        new
                        {
                            SubCategoryId = 4,
                            CategoryId = 1,
                            Name = "Shorts"
                        },
                        new
                        {
                            SubCategoryId = 5,
                            CategoryId = 1,
                            Name = "Jackets"
                        },
                        new
                        {
                            SubCategoryId = 6,
                            CategoryId = 1,
                            Name = "Sneakers"
                        },
                        new
                        {
                            SubCategoryId = 7,
                            CategoryId = 1,
                            Name = "Formal Shoes"
                        },
                        new
                        {
                            SubCategoryId = 8,
                            CategoryId = 1,
                            Name = "Sandals"
                        },
                        new
                        {
                            SubCategoryId = 9,
                            CategoryId = 1,
                            Name = "Watches"
                        },
                        new
                        {
                            SubCategoryId = 10,
                            CategoryId = 1,
                            Name = "Sunglasses"
                        },
                        new
                        {
                            SubCategoryId = 11,
                            CategoryId = 1,
                            Name = "Belts"
                        },
                        new
                        {
                            SubCategoryId = 12,
                            CategoryId = 2,
                            Name = "Dresses"
                        },
                        new
                        {
                            SubCategoryId = 13,
                            CategoryId = 2,
                            Name = "Blouse"
                        },
                        new
                        {
                            SubCategoryId = 14,
                            CategoryId = 2,
                            Name = "Skirts"
                        },
                        new
                        {
                            SubCategoryId = 15,
                            CategoryId = 2,
                            Name = "Pants"
                        },
                        new
                        {
                            SubCategoryId = 16,
                            CategoryId = 2,
                            Name = "Outerwear"
                        },
                        new
                        {
                            SubCategoryId = 17,
                            CategoryId = 2,
                            Name = "Heels"
                        },
                        new
                        {
                            SubCategoryId = 18,
                            CategoryId = 2,
                            Name = "Flats"
                        },
                        new
                        {
                            SubCategoryId = 19,
                            CategoryId = 2,
                            Name = "Sandals"
                        },
                        new
                        {
                            SubCategoryId = 20,
                            CategoryId = 2,
                            Name = "Jewelry"
                        },
                        new
                        {
                            SubCategoryId = 21,
                            CategoryId = 2,
                            Name = "Handbags"
                        },
                        new
                        {
                            SubCategoryId = 22,
                            CategoryId = 2,
                            Name = "Scarves"
                        },
                        new
                        {
                            SubCategoryId = 23,
                            CategoryId = 3,
                            Name = "Dresses"
                        },
                        new
                        {
                            SubCategoryId = 24,
                            CategoryId = 3,
                            Name = "Blouse"
                        },
                        new
                        {
                            SubCategoryId = 25,
                            CategoryId = 3,
                            Name = "Pants"
                        },
                        new
                        {
                            SubCategoryId = 26,
                            CategoryId = 3,
                            Name = "Skirts"
                        },
                        new
                        {
                            SubCategoryId = 27,
                            CategoryId = 3,
                            Name = "Shoes"
                        },
                        new
                        {
                            SubCategoryId = 28,
                            CategoryId = 3,
                            Name = "Sandals"
                        },
                        new
                        {
                            SubCategoryId = 29,
                            CategoryId = 3,
                            Name = "Hair Accessories"
                        },
                        new
                        {
                            SubCategoryId = 30,
                            CategoryId = 3,
                            Name = "Bags"
                        },
                        new
                        {
                            SubCategoryId = 31,
                            CategoryId = 4,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            SubCategoryId = 32,
                            CategoryId = 4,
                            Name = "Pants"
                        },
                        new
                        {
                            SubCategoryId = 33,
                            CategoryId = 4,
                            Name = "Shorts"
                        },
                        new
                        {
                            SubCategoryId = 34,
                            CategoryId = 4,
                            Name = "Sneakers"
                        },
                        new
                        {
                            SubCategoryId = 35,
                            CategoryId = 4,
                            Name = "Shoes"
                        },
                        new
                        {
                            SubCategoryId = 36,
                            CategoryId = 4,
                            Name = "Sandals"
                        },
                        new
                        {
                            SubCategoryId = 37,
                            CategoryId = 4,
                            Name = "Caps"
                        },
                        new
                        {
                            SubCategoryId = 38,
                            CategoryId = 4,
                            Name = "Backpacks"
                        },
                        new
                        {
                            SubCategoryId = 39,
                            CategoryId = 5,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            SubCategoryId = 40,
                            CategoryId = 5,
                            Name = "Shirts"
                        },
                        new
                        {
                            SubCategoryId = 41,
                            CategoryId = 5,
                            Name = "Pants"
                        },
                        new
                        {
                            SubCategoryId = 42,
                            CategoryId = 5,
                            Name = "Shorts"
                        },
                        new
                        {
                            SubCategoryId = 43,
                            CategoryId = 5,
                            Name = "Socks"
                        },
                        new
                        {
                            SubCategoryId = 44,
                            CategoryId = 5,
                            Name = "Sleepwear"
                        },
                        new
                        {
                            SubCategoryId = 45,
                            CategoryId = 5,
                            Name = "Baby Shoes"
                        },
                        new
                        {
                            SubCategoryId = 46,
                            CategoryId = 5,
                            Name = "Bibs"
                        },
                        new
                        {
                            SubCategoryId = 47,
                            CategoryId = 5,
                            Name = "Hats"
                        },
                        new
                        {
                            SubCategoryId = 48,
                            CategoryId = 6,
                            Name = "Mobiles"
                        },
                        new
                        {
                            SubCategoryId = 49,
                            CategoryId = 6,
                            Name = "Laptops"
                        },
                        new
                        {
                            SubCategoryId = 50,
                            CategoryId = 6,
                            Name = "Tablets"
                        },
                        new
                        {
                            SubCategoryId = 51,
                            CategoryId = 6,
                            Name = "Chargers"
                        },
                        new
                        {
                            SubCategoryId = 52,
                            CategoryId = 6,
                            Name = "Headphones"
                        },
                        new
                        {
                            SubCategoryId = 53,
                            CategoryId = 6,
                            Name = "Cases"
                        },
                        new
                        {
                            SubCategoryId = 54,
                            CategoryId = 7,
                            Name = "Foundation"
                        },
                        new
                        {
                            SubCategoryId = 55,
                            CategoryId = 7,
                            Name = "Concealer"
                        },
                        new
                        {
                            SubCategoryId = 56,
                            CategoryId = 7,
                            Name = "Blush"
                        },
                        new
                        {
                            SubCategoryId = 57,
                            CategoryId = 7,
                            Name = "Eyeshadow"
                        },
                        new
                        {
                            SubCategoryId = 58,
                            CategoryId = 7,
                            Name = "Mascara"
                        },
                        new
                        {
                            SubCategoryId = 59,
                            CategoryId = 7,
                            Name = "Eyeliner"
                        },
                        new
                        {
                            SubCategoryId = 60,
                            CategoryId = 7,
                            Name = "Lipstick"
                        },
                        new
                        {
                            SubCategoryId = 61,
                            CategoryId = 7,
                            Name = "Lip Gloss"
                        },
                        new
                        {
                            SubCategoryId = 62,
                            CategoryId = 8,
                            Name = "Animals"
                        },
                        new
                        {
                            SubCategoryId = 63,
                            CategoryId = 8,
                            Name = "Flowers and Guardians"
                        },
                        new
                        {
                            SubCategoryId = 64,
                            CategoryId = 8,
                            Name = "Home"
                        },
                        new
                        {
                            SubCategoryId = 65,
                            CategoryId = 8,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("Eshop.Core.Entities.TempOrder", b =>
                {
                    b.Property<int>("TempOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempOrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DeliveryFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempOrderId");

                    b.ToTable("tempOrders");
                });

            modelBuilder.Entity("Eshop.Core.Entities.TempOrderItem", b =>
                {
                    b.Property<int>("TempOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempOrderItemId"));

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSizeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TempOrderId")
                        .HasColumnType("int");

                    b.HasKey("TempOrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSizeId");

                    b.HasIndex("TempOrderId");

                    b.ToTable("tempOrderItems");
                });

            modelBuilder.Entity("Eshop.Core.Entities.UserOTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OTPGeneratedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("userOTPs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Eshop.Core.Entities.Customer", b =>
                {
                    b.HasBaseType("Eshop.Core.Entities.ApplicationUser");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Eshop.Core.Entities.Seller", b =>
                {
                    b.HasBaseType("Eshop.Core.Entities.ApplicationUser");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<bool>("HasOwnShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminSeen")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaxRegisterExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxRegisterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxRegisterPDF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Sellers", (string)null);
                });

            modelBuilder.Entity("Eshop.Core.Entities.Cart", b =>
                {
                    b.HasOne("Eshop.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eshop.Core.Entities.CartItem", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId");

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Favorite", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.Product", "Product")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Feature", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Product", "Product")
                        .WithMany("Features")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Eshop.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Product", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("sellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Seller");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Eshop.Core.Entities.ProductImages", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Product", "product")
                        .WithMany("productImages")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Eshop.Core.Entities.ProductSize", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.Size", "Size")
                        .WithMany("ProductSizes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Reviews", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Eshop.Core.Entities.SubCategory", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Eshop.Core.Entities.TempOrderItem", b =>
                {
                    b.HasOne("Eshop.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId");

                    b.HasOne("Eshop.Core.Entities.TempOrder", "TempOrder")
                        .WithMany("TempOrderItems")
                        .HasForeignKey("TempOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductSize");

                    b.Navigation("TempOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Eshop.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Eshop.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eshop.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Eshop.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Core.Entities.Customer", b =>
                {
                    b.HasOne("Eshop.Core.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Eshop.Core.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Core.Entities.Seller", b =>
                {
                    b.HasOne("Eshop.Core.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Eshop.Core.Entities.Seller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Core.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Product", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("Features");

                    b.Navigation("ProductSizes");

                    b.Navigation("Reviews");

                    b.Navigation("productImages");
                });

            modelBuilder.Entity("Eshop.Core.Entities.Size", b =>
                {
                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("Eshop.Core.Entities.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Eshop.Core.Entities.TempOrder", b =>
                {
                    b.Navigation("TempOrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
